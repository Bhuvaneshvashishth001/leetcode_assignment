Minimum Path sum Leetcode

class Solution {
    public int minPathSum(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int dp[][] = new int[n][m];
        dp[0][0] = grid[0][0];
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(i==0 && j==0){
                    continue;
                }
                if(i>0 && j==0){
                    dp[i][j] = dp[i-1][j]+grid[i][j];
                }
                else if(i==0 && j>0){
                    dp[i][j] = dp[i][j-1]+grid[i][j];
                }
                else{
                    dp[i][j] = Math.min(dp[i][j-1],dp[i-1][j])+grid[i][j];
                }
            }
        }
        return dp[n-1][m-1];
    }
}

Minimu falling path sum leetcode dp

class Solution {
    public int minFallingPathSum(int[][] arr) {
        int n = arr.length;
        int m = arr[0].length;
        int dp[][] = new int[n][m];
        for(int i=0;i<m;i++){
            dp[n-1][i] = arr[n-1][i];
        }

        for(int i=n-2;i>=0;i--){
            for(int j=0 ;j<m;j++){
                if(j==0){
                    dp[i][j] = Math.min(dp[i+1][j],dp[i+1][j+1])+arr[i][j];
                }
                else if(j==m-1){
                    dp[i][j] = Math.min(dp[i+1][j],dp[i+1][j-1])+arr[i][j];
                }
                else{
                    dp[i][j] = Math.min(dp[i+1][j-1],Math.min(dp[i+1][j],dp[i+1][j+1]))+arr[i][j];
                }
            }
        }
        int ans= Integer.MAX_VALUE;
        for(int i=0;i<m;i++){
            ans = Math.min(ans,dp[0][i]);
        }
        return ans;
    }
}
