1st approach using same as all nodes distance of binary tree

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public static TreeNode Parent(TreeNode root, Map<TreeNode,TreeNode> map,int start){
        if(root == null){
            return null;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        TreeNode startNode  = null;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i=0 ;i<size;i++){
                TreeNode node = queue.poll();
                if(node.val == start) startNode = node;
                if(node.left!=null){
                    queue.offer(node.left);
                    map.put(node.left,node);
                }
                if(node.right!=null){
                    queue.offer(node.right);
                    map.put(node.right,node);
                }
            }
        }
        return startNode;
    }
    public int amountOfTime(TreeNode root, int start) {
        Map<TreeNode,TreeNode> map = new HashMap<>();
        TreeNode begineer = Parent(root,map,start);
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(begineer);
        int max =0;
        Map<TreeNode,Integer> visited = new HashMap<>();
        visited.put(begineer,0);
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i=0 ;i<size ;i++){
                TreeNode curr = queue.poll();
                int time= visited.get(curr);
                if(curr.left!=null && !visited.containsKey(curr.left)){
                    queue.offer(curr.left);
                    visited.put(curr.left,time+1);
                    max = Math.max(max,time+1);
                }
                if(curr.right!=null && !visited.containsKey(curr.right)){
                    queue.offer(curr.right);
                    visited.put(curr.right,time+1);
                    max = Math.max(max,time+1);
                }
                if(map.get(curr)!=null && !visited.containsKey(map.get(curr))){
                    queue.offer(map.get(curr));
                    visited.put(map.get(curr),time+1);
                    max = Math.max(max,time+1);
                }
            }
        }
        return max;
    }
}

2nd approach adjacency list of coneections

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
import java.util.*;

class Solution {
    // Build adjacency list + initialize map
    public static void traversal(TreeNode root, ArrayList<ArrayList<Integer>> adj, Map<Integer,Integer> map){
        if(root == null) return;

        if(root.left != null){
            adj.get(root.val).add(root.left.val);
            adj.get(root.left.val).add(root.val);
        }
        if(root.right != null){
            adj.get(root.val).add(root.right.val);
            adj.get(root.right.val).add(root.val);
        }

        map.put(root.val, Integer.MAX_VALUE);

        traversal(root.left, adj, map);
        traversal(root.right, adj, map);
    }

    // DFS to spread infection
    public static void dfs(int node, ArrayList<ArrayList<Integer>> adj, Map<Integer,Integer> map, int time){
        // If we already reached this node earlier in less time, skip
        if(time >= map.get(node)) return;

        map.put(node, time);

        for(int nei : adj.get(node)){
            dfs(nei, adj, map, time + 1);
        }
    }

    public int amountOfTime(TreeNode root, int start) {
        int N = 100005; // max node value constraint in problem
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i=0; i<=N; i++){
            adj.add(new ArrayList<>());
        }

        Map<Integer,Integer> map = new HashMap<>();
        traversal(root, adj, map);

        // Start infection
        dfs(start, adj, map, 0);

        // Answer is max time stored in map
        int ans = 0;
        for(int val : map.values()){
            if(val != Integer.MAX_VALUE) ans = Math.max(ans, val);
        }
        return ans;
    }
}


