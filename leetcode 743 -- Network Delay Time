class Solution {
    class Pair{
        int node;
        int dis;
        public Pair(int node,int dis){
            this.node=node;
            this.dis=dis;
        }
    }
    public int networkDelayTime(int[][] times, int n, int k) {
        ArrayList<ArrayList<Pair>> adj = new ArrayList<>();
        for(int i=0;i<n ;i++){
            adj.add(new ArrayList<Pair>());
        }
        for(int edge[] :times){
            int u=edge[0];
            int v=edge[1];
            int w=edge[2];
            adj.get(u-1).add(new Pair(v-1,w));
        }
        int dist[] = new int[n];
        int visit[] = new int[n];
        Arrays.fill(dist,Integer.MAX_VALUE);
        Queue<Pair> queue = new LinkedList<>();
        queue.add(new Pair(k-1,0));
        dist[k-1]=0;
        visit[k-1]=1;
        while(!queue.isEmpty()){
            Pair P= queue.poll();
            int node=P.node;
            int dis=P.dis;
            for(Pair p:adj.get(node)){
                int curr = p.node;
                int dur = p.dis;
                if(dist[curr]>dis+dur){
                    dist[curr] = dis+dur;
                    queue.offer(new Pair(curr,dis+dur));
                }
            }
        }
        int travel=0;
        for(int d:dist){
            if(d==Integer.MAX_VALUE){
                return -1;
            }
            travel=Math.max(travel,d);
        }
        return travel;
    }
}
