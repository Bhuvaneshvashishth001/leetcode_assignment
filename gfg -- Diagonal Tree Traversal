Most appropriate Solution 

Intution --- add left node of each node in queue simultaneously add right node into list 

bfs approach

class Tree {
    public ArrayList<Integer> diagonal(Node root) {
        // add your code here.
        ArrayList<Integer> list = new ArrayList<>();
        Queue<Node> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            Node node = queue.poll();
            while(node!=null){
                list.add(node.data);
                if(node.left!=null){
                    queue.add(node.left);
                }
                node = node.right;
            }
        }
        return list;
    }
}


dfs approach


class Tree {
    public static void dfs(Node root,Map<Integer,ArrayList<Integer>> map,int lev){
        if(root ==null){
            return;
        }
        if(!map.containsKey(lev)){
            map.put(lev,new ArrayList<>());
        }
        map.get(lev).add(root.data);
        dfs(root.left,map,lev+1);
        dfs(root.right,map,lev);
    }
    public ArrayList<Integer> diagonal(Node root) {
        // add your code here.
        Map<Integer,ArrayList<Integer>> map = new HashMap<>();
        dfs(root,map,0);
        ArrayList<Integer> list = new ArrayList<>();
        for(ArrayList<Integer> node:map.values()){
            list.addAll(node);
        }
        return list;
    }
}
