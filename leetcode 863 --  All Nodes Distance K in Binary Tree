863. All Nodes Distance K in Binary Tree

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public static void parent(TreeNode root,Map<TreeNode,TreeNode> map){
        if(root == null){
            return;
        }
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i=0 ;i<size ;i++){
                TreeNode node = queue.poll();
                if(node.left!=null){
                    queue.offer(node.left);
                    map.put(node.left,node);
                }
                if(node.right!=null){
                    queue.offer(node.right);
                    map.put(node.right,node);
                } 
            }
        }
    }
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        Map<TreeNode,TreeNode> map = new HashMap<>();
        parent(root,map);
        Map<TreeNode,Boolean> visited = new HashMap<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(target);
        visited.put(target,true);
        while(!queue.isEmpty()){
            int size = queue.size();
            if( k==0){
                break;
            }
            k--;
            for(int i=0 ;i<size ;i++){
                TreeNode node = queue.poll();
                if(node.left!=null && visited.get(node.left) == null){
                    queue.offer(node.left);
                    visited.put(node.left,true);
                }
                if(node.right!=null && visited.get(node.right) == null){
                    queue.offer(node.right);
                    visited.put(node.right,true);
                }
                if(map.get(node) != null && visited.get((map.get(node)))==null){
                    queue.offer(map.get(node));
                    visited.put(map.get(node),true);
                }
            }  
        }
         ArrayList<Integer> list = new ArrayList<>();
            while(!queue.isEmpty()){
                list.add(queue.poll().val);
            }
        return list;
    }
}
